using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using MediatR;

namespace Domain.Common;

public abstract class BaseEntity
{
    private readonly List<INotification> _domainEvents = [];

    public IReadOnlyCollection<INotification> DomainEvents => _domainEvents.AsReadOnly();

    protected void AddDomainEvent(INotification eventItem)
    {
        _domainEvents.Add(eventItem);
    }

    public void ClearDomainEvents()
    {
        _domainEvents.Clear();
    }
}

/// <summary>
/// Base class for entities whose primary key is database-generated (identity).
/// </summary>
/// <typeparam name="TKey">Type of the primary key.</typeparam>
public abstract class BaseEntity<TKey> : BaseEntity, IEntity<TKey>
{
    /// <summary>
    /// Primary key generated by the database.
    /// </summary>
    public TKey Id { get; set; }

    /// <summary>
    /// Flag indicating a soft-delete state.
    /// </summary>
    public bool IsDelete { get; set; } = false;

    /// <summary>
    /// create utc time this item
    /// </summary>
    public DateTime CreateDate { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// create utc time this item
    /// </summary>
    public DateTime ModifiedDate { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Base class for entities whose primary key is assigned manually.
/// </summary>
/// <typeparam name="TKey">Type of the primary key.</typeparam>
public abstract class BaseEntityNonIdentity<TKey> : IEntity<TKey>
{
    private readonly List<INotification> _domainEvents = [];

    public IReadOnlyCollection<INotification> DomainEvents => _domainEvents.AsReadOnly();

    protected void AddDomainEvent(INotification eventItem)
    {
        _domainEvents.Add(eventItem);
    }

    public void ClearDomainEvents()
    {
        _domainEvents.Clear();
    }

    /// <summary>
    /// Primary key assigned by application logic.
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.None)]
    public required TKey Id { get; set; }

    /// <summary>
    /// create utc time this item
    /// </summary>
    public DateTime CreateDate { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// create utc time this item
    /// </summary>
    public DateTime ModifiedDate { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Flag indicating a soft-delete state.
    /// </summary>
    public bool IsDelete { get; set; } = false;
}

public abstract class BaseEntityNonIdentity : BaseEntityNonIdentity<long>;